import numpy as np

# 宝可梦属性相克计算
# 使用元组节约使用的内存
attribute = ("glass", "water", "fire")
attribute1 = {"一般": 0, "格斗": 1,"斗": 1, "飞行": 2,"飞":2, "毒": 3, "地面": 4, "岩石": 5,
              "虫": 6, "幽灵": 7, "钢": 8, "火": 9, "水": 10, "草": 11,
              "电": 12, "超能力": 13,"超": 13, "冰": 14, "龙": 15, "恶": 16, "妖精": 17}

print(attribute1["虫"])
# 18x18的矩阵，每行表示一种进攻属性对18中防守属性的效果
matrix = np.array([[1, 1, 1, 1, 1, 0.5, 1, 0, 0.5, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                   [2, 1, 0.5, 0.5, 1, 2, 0.5, 0, 2, 1, 1, 1, 1, 0.5, 2, 1, 2, 0.5],
                   [1, 2, 1, 1, 1, 0.5, 2, 1, 0.5, 1, 1, 2, 0.5, 1, 1, 1, 1, 1],
                   [1, 1, 1, 0.5, 0.5, 0.5, 1, 0.5, 0, 1, 1, 2, 1, 1, 1, 1, 1, 2],
                   [1, 1, 0, 2, 1, 2, 0.5, 1, 2, 2, 1, 0.5, 2, 1, 1, 1, 1, 1],
                   [1, 0.5, 2, 1, 0.5, 1, 2, 1, 0.5, 2, 1, 1, 1, 1, 2, 1, 1, 1],
                   [1, 0.5, 0.5, 0.5, 1, 1, 1, 0.5, 0.5, 0.5, 1, 2, 1, 2, 1, 1, 2, 0.5],
                   [0, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 0.5, 1],
                   [1, 1, 1, 1, 1, 2, 1, 1, 0.5, 0.5, 0.5, 1, 0.5, 1, 2, 1, 1, 2],
                   [1, 1, 1, 1, 1, 0.5, 2, 1, 2, 0.5, 0.5, 2, 1, 1, 2, 0.5, 1, 1],
                   [1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 0.5, 0.5, 1, 1, 1, 0.5, 1, 1],
                   [1, 1, 0.5, 0.5, 2, 2, 0.5, 1, 0.5, 0.5, 2, 0.5, 1, 1, 1, 0.5, 1, 1],
                   [1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 2, 0.5, 0.5, 1, 1, 0.5, 1, 1],
                   [1, 2, 1, 2, 1, 1, 1, 1, 0.5, 1, 1, 1, 1, 0.5, 1, 1, 0, 1],
                   [1, 1, 2, 1, 2, 1, 1, 1, 0.5, 0.5, 0.5, 2, 1, 1, 0.5, 2, 1, 1],
                   [1, 1, 1, 1, 1, 1, 1, 1, 0.5, 1, 1, 1, 1, 1, 1, 2, 1, 0],
                   [1, 0.5, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 0.5, 0.5],
                   [1, 2, 1, 0.5, 1, 1, 1, 1, 0.5, 0.5, 1, 1, 1, 1, 1, 2, 2, 1]
                   ])
print(matrix.shape)


# 攻击和属性的关系
def restrain(atk_attribute, atbu1=None, atbu2=None):
    if atk_attribute not in attribute1:
        return -1
    if atbu1!=None and atbu1 not in attribute1:
        return -1
    if atbu2!=None and atbu2 not in attribute1:
        return -1

    if atk_attribute == None:
        print("未指定进攻属性")
        return -1
    if atbu1 == None and atbu2 == None:
        return -1
    a = 1
    b = 1
    result = 1
    if atbu2 == None:
        result = matrix[attribute1[atk_attribute]][attribute1[atbu1]]
    else:
        result = matrix[attribute1[atk_attribute]][attribute1[atbu1]] * matrix[attribute1[atk_attribute]][
            attribute1[atbu2]]

    return result


print(restrain("火", "草"))
